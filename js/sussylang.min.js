let cells=new Array(10).fill(0),pointer=0;sussy=null;const tableCells=document.getElementById("tableCells"),modes={EVAL:"eval",CODE:"code"};function displayCellsToTable(){const e=cells.map(((e,t)=>`<tr${t===pointer&&' class="current-cell"'}>\n    <td>${t+1}</td>\n    <td>${e}</td>\n    </tr>`));tableCells.innerHTML=`<tr>\n  <th>Cell</th>\n  <th>Value</th>\n  </tr>\n  ${e.join("\n")}`}function switchMode(e){const t=document.getElementById("evalMode"),s=document.getElementById("codeMode");"eval"==e?(t.style.display="block",s.style.display="none"):"code"==e&&(resetAll(),t.style.display="none",s.style.display="block")}function resetAll(){sussy=null,cells=new Array(10).fill(0),pointer=0,updateOperations(0),displayCellsToTable(),updateCurrentLine(0),updateCurrentOutput("")}function updateCurrentLine(e){document.getElementById("currentLine").innerText=e}function evaluateCode(){resetAll();const e=document.getElementById("sussycode"),t=document.getElementById("input"),s=document.getElementById("inputText"),n=document.getElementById("lines"),l=cleanCode(e.value);s.innerText=t.value,n.innerText=l.split("\n").length,switchMode(modes.EVAL),displayCellsToTable()}function updateOperations(e){document.getElementById("operations").innerText=`${e}`}function updateCellsUtilized(){document.getElementById("cellsUtilized").innerText=`${cells.length}`}function runCode(e){resetAll(),sussy=null;const t=document.getElementById("sussycode"),s=document.getElementById("input"),n=cleanCode(t.value).split("\n").map((e=>e.trim().split(" ").length-1));if(s.value||!n.includes(7))try{sussy=new SussyLang(n,s.value,e),sussy.execute()}catch(e){document.getElementById("output").innerHTML+=` <span style="color:red;">(Err: ${e})</span>`}else{document.getElementById("output").innerHTML='<span style="color:red;">(Err: Must have an input when using the input operator!)</span>'}}function updateCurrentOutput(e){document.getElementById("output").innerText=e}function killSussy(){window.location.reload()}function cleanCode(e){const t=e.trim().split("\n"),s=t.findIndex((e=>"sussy"===e.trim()));if(-1===s)return e;{t.splice(0,s+1);const n=t.findIndex((e=>"sussy"===e.trim()));return-1===n?e:(t.splice(n,t.length),t.join("\n"))}}class SussyLang{constructor(e,t,s){this.in=t,this.output=null,this.c=null,this.codeArray=e,this.ops=0,this.blockOpeners={},this.blockClosers={},this.bfSource=this.translateBack(),this.msDelay=s,this.getBlocks(this.bfSource),this.operators={">":()=>{pointer+=1,pointer===cells.length&&(cells[pointer]=0),this.c+=1},"<":()=>{pointer-=1,pointer<0&&(pointer=0),this.c+=1},"+":()=>{cells[pointer]+1===256?cells[pointer]=0:cells[pointer]+=1,this.c++},"-":()=>{cells[pointer]-1==-1?cells[pointer]=255:cells[pointer]-=1,this.c++},"[":()=>{cells[pointer]?this.c++:this.c=this.blockOpeners[this.c]+1},"]":()=>{cells[pointer]?this.c=this.blockClosers[this.c]+1:this.c++},".":()=>{const e=String.fromCharCode(cells[pointer]);if(this.output+=e,this.c++,this.msDelay){document.getElementById("output").innerText=this.output}},",":()=>{if(!this.in.length)return!1;cells[pointer]=this.in.charCodeAt(0),this.in=this.in.substring(1),this.c++}}}translateBack(){return this.codeArray.map((e=>translateDictionary[e])).join("")}getBlocks(e){let t,s,n=0;const l=/\[|\]/g,i=[];for(;n<e.length&&(t=e.substring(n).search(l),!(t<0));)t+=n,"["===e[t]?i.push(t):(s=i.pop(),this.blockOpeners[s]=t,this.blockClosers[t]=s),n=t+1;if(i.length)throw"Loops must be closed!"}async execute(){resetAll(),this.c=0,this.output="",this.input=input;const e=this.bfSource;for(var t=e.length;this.c<t&&(this.ops++,!1!==this.operators[e[this.c]]());)this.msDelay?(displayCellsToTable(),updateCurrentLine(this.c),updateOperations(this.ops),updateCellsUtilized(),await new Promise((e=>setTimeout(e,this.msDelay)))):(this.ops%1e3==0||this.ops<1e3)&&(displayCellsToTable(),updateCurrentLine(this.c),updateCurrentOutput(this.output),updateOperations(this.ops),updateCellsUtilized(),await new Promise((e=>setTimeout(e,1))));return this.output}}